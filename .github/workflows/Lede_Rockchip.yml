name: Lede_Rockchip

on:
  workflow_dispatch:
    inputs:
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.6.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
      ccache:
        description: 'Enable ccache (Use Cache to speed up next build)'
        type: boolean
        default: false          
      lan_addr:
        description: 'Setting default LAN address'
        required: true
        default: '10.0.0.1'
        type: string  
      device:
        description: 'Select the build device'
        required: true
        default: 'friendlyarm_nanopi-r2s'
        type: choice
        options:
          - 'friendlyarm_nanopi-r2c'
          - 'friendlyarm_nanopi-r2c-plus'
          - 'friendlyarm_nanopi-r2s'
          - 'friendlyarm_nanopi-r3s'
          - 'friendlyarm_nanopi-r4s'
          - 'friendlyarm_nanopi-r4se'
          - 'friendlyarm_nanopi-r5c'
          - 'friendlyarm_nanopi-r5s'
          - 'friendlyarm_nanopi-r6c'
          - 'friendlyarm_nanopi-r6s'
          - 'lunzn_fastrhino-r66s'
          - 'lunzn_fastrhino-r68s'
  
jobs:
  build:
    name: Build ${{ github.event.inputs.device }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      continue-on-error: true
      uses: actions/checkout@main
      with:
        path: ZeroWrt-Action

    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        echo build_dir="/builder" >> "$GITHUB_ENV"

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Install Caddy Server
      run: |
        sudo curl -sL -o /usr/bin/caddy https://github.com/oppen321/ZeroWrt-Action/releases/download/caddy/caddy
        sudo chmod 755 /usr/bin/caddy
        echo ":8080 {" > caddyfile
        echo "    root * $(pwd)/ZeroWrt-Action" >> caddyfile
        echo "    file_server browse" >> caddyfile
        echo "}" >> caddyfile
        sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile

    - name: Free disk space
      uses: sbwml/actions@free-disk
      with:
        build-mount-path: /builder

    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup

    - name: Install LLVM
      uses: sbwml/actions@install-llvm   

    - name: Restore Cached
      if: ${{ github.event.inputs.ccache }}
      uses: actions/cache/restore@v4
      with:
        path: /builder/.ccache
        key: Lede-Rockchip-ccache

    - name: Restore Cached (releases)
      if: ${{ github.event.inputs.ccache }}
      continue-on-error: true
      working-directory: /builder
      run: |
        curl -s -O https://github.com/oppen321/ZeroWrt-Action/releases/download/ccache/Lede-Rockchip.tar.00
        cat Lede-Rockchip.tar.* | tar -xf - || true
        rm -rf Lede-Rockchip.tar.* || true
        [ -d .ccache ] && cache_size=$(du -sb .ccache | awk '{print $1}') || cache_size=0
        cache_size_mb=$(echo "scale=0; ${cache_size} / (1024 * 1024)" | bc)
        echo "Cache Size: ~${cache_size_mb} MB (${cache_size} B)"
        echo "Cache restored successfully"
        echo "Cache restored from key: Lede-Rockchip"
        
    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      run: |
        export LAN=${{ github.event.inputs.lan_addr }}
        export device=${{ github.event.inputs.device }}
        export openwrt_kernel=${{ github.event.inputs.openwrt_kernel }} 
        bash <(curl -sS http://127.0.0.1:8080/Lede/build.sh) "$LAN" "$device" "$openwrt_kernel"

    - name: Extensive logs after a failed compilation
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s 

    - name: Save Cached
      if: ${{ github.event.inputs.ccache }}
      continue-on-error: true
      uses: actions/cache/save@v4
      with:
        path: /builder/.ccache
        key: Lede-Rockchip-ccache

    - name: Create ccache tar files
      if: ${{ github.event.inputs.ccache }} 
      continue-on-error: true
      working-directory: /builder
      run: |
        mkdir -p ccache
        tar cf - .ccache | split -d -b 1800m - ccache/Lede-Rockchip.tar.

    - name: Upload Cached (releases - ccache)
      if: ${{ github.event.inputs.ccache }}
      continue-on-error: true
      uses: ncipollo/release-action@v1.14.0
      with:
        name: ccache
        allowUpdates: true
        tag: ccache
        commit: master
        replacesArtifacts: true
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          ${{ env.build_dir }}/ccache/*
          
    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p rom
        case "${{ github.event.inputs.device }}" in
          friendlyarm_nanopi-r2c)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r2c-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r2s)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r3s)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r3s-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r4s)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r4se)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r4se-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r5c)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r5c-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r5s)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r5s-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r6c)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r6c-squashfs-sysupgrade.img.gz rom/
            ;;
          friendlyarm_nanopi-r6s)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-friendlyarm_nanopi-r6s-squashfs-sysupgrade.img.gz rom/
            ;;
          lunzn_fastrhino-r66s)
            cp -a openwrt/bin/targets/rockchip/*/immortalwrt-mediatek-mt7981-livinet_zr-3020-squashfs-sysupgrade.bin rom/
            ;;
          lunzn_fastrhino-r68s)
            cp -a openwrt/bin/targets/rockchip/*/immortalwrt-mediatek-mt7981-mt7981-360-t7-squashfs-sysupgrade.bin rom/
            ;;
          ezpro_mrkaio-m68s-plus)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-ezpro_mrkaio-m68s-plus-squashfs-sysupgrade.img.gz rom/
            ;;
          ezpro_mrkaio-m68s)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-ezpro_mrkaio-m68s-squashfs-sysupgrade.img.gz rom/
            ;;
          hinlink_opc-h66k)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-hinlink_opc-h66k-squashfs-sysupgrade.img.gz rom/
            ;; 
          inlink_opc-h68k)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-hinlink_opc-h68k-squashfs-sysupgrade.img.gz rom/
            ;;
          hinlink_opc-h69k)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-hinlink_opc-h69k-squashfs-sysupgrade.img.gz rom/
            ;;
          lyt_t68m)
            cp -a openwrt/bin/targets/rockchip/*/openwrt-rockchip-armv8-lyt_t68m-squashfs-sysupgrade.img.gz rom/
            ;; 
          *)
            echo "Device not recognized, skipping firmware copy."
            ;;
        esac
        
    - name: Create release
      continue-on-error: true
      uses: ncipollo/release-action@v1
      with:
        name: ${{ github.event.inputs.source_branch }}
        allowUpdates: true
        tag: ${{ github.event.inputs.source_branch }}
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.build_dir }}/rom/*          
