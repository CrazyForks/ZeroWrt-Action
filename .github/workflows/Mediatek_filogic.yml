name: Mediatek_filogic

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "hanwckf_mt798x_v21.02"
        type: choice
        options:
          - hanwckf_mt798x_v21.02
          - padavanonly_mt798x_v24.10
      ccache:
        description: 'Enable ccache (Use Cache to speed up next build)'
        type: boolean
        default: false
      lan_addr:
        description: 'Setting default LAN address'
        required: true
        default: '10.0.0.1'
        type: string  
      device:
        description: 'Select the build device'
        required: true
        default: 'cetron_ct3003'
        type: choice
        options:
          - 'abt_asr3000'
          - 'cetron_ct3003'
          - 'cmcc_a10'
          - 'cmcc_rax3000m_emmc'
          - 'cmcc_rax3000m_nand'
          - 'gl_inet_gl_mt3000'
          - 'h3c_nx30pro'
          - 'imou_lc_hx3001'
          - 'jcg_q30'
          - 'konka_komi_a31'
          - 'livinet_zr_3020'
          - 'mediatek_360_t7'
          - 'mediatek_360_t7_108m_ubi'
          - 'mediatek_clt_r30b1'
          - 'mediatek_clt_r30b1_112m_ubi'
          - 'xiaomi_mi_router_ax3000t'
          - 'xiaomi_mi_router_ax3000t_stock_layout'
          - 'xiaomi_mi_router_wr30u_stock_layout'
          - 'xiaomi_mi_router_wr30u_112m_ubi_layout'
          - 'xiaomi_mi_router_wr30u_stock_layout'
          - 'gl_inet_gl_mt6000'
          - 'tp_link_tl_xdr6086'
          - 'tp_link_tl_xdr6088'
          - 'xiaomi_redmi_router_ax6000'
          - 'xiaomi_redmi_router_ax6000_stock_layout'
  
jobs:
  build:
    name: Build ${{ github.event.inputs.device }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      continue-on-error: true
      uses: actions/checkout@main
      with:
        path: ZeroWrt-Action

    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        echo build_dir="/builder" >> "$GITHUB_ENV"
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: /builder/openwrt/rom/*

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Install Caddy Server
      run: |
        sudo curl -sL -o /usr/bin/caddy https://github.com/oppen321/ZeroWrt-Action/releases/download/caddy/caddy
        sudo chmod 755 /usr/bin/caddy
        echo ":8080 {" > caddyfile
        echo "    root * $(pwd)/ZeroWrt-Action" >> caddyfile
        echo "    file_server browse" >> caddyfile
        echo "}" >> caddyfile
        sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile

    - name: Free disk space
      uses: sbwml/actions@free-disk
      with:
        build-mount-path: /builder

    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup

    - name: Install LLVM
      uses: sbwml/actions@install-llvm   

    - name: Restore Cached
      if: ${{ github.event.inputs.ccache == 'true'
      uses: actions/cache/restore@v4
      with:
        path: /builder/.ccache
        key: ${{ github.event.inputs.source_branch }}-ccache

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      env:
        git_name: ${{ secrets.username }}
        git_password: ${{ secrets.password }}
      run: |
        export ${{ github.event.inputs.build_options }} LAN=${{ github.event.inputs.lan_addr }} USE_GCC15=y
        [ ${{ github.event.inputs.ccache }} = 'true' ] && export ENABLE_CCACHE=y
        bash <(curl -sS http://127.0.0.1:8080/build.sh) ${{ env.build_version }} ${{ github.event.inputs.device }}
        cd openwrt
        if [ "${{ github.event.inputs.version }}" = release ]; then
          tags=OpenWrt-$(git describe --abbrev=0 --tags)
        else
          tags=snapshot-24.10-$(git log -n 1 --date=format:"%Y%m%d" --format="%cd")-$(git log --pretty=format:"%h" -1)
        fi
        echo "latest_release=$tags" >>$GITHUB_ENV 

    - name: Extensive logs after a failed compilation
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s

    - name: Delete Cached
      if: ${{ github.event.inputs.ccache == 'true'
      working-directory: /builder
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
      run: |
        gh cache ${{ github.event.inputs.source_branch }}-ccache || true 

    - name: Save Cached
      if: ${{ github.event.inputs.ccache == 'true' 
      continue-on-error: true
      uses: actions/cache/save@v4
      with:
        path: /builder/.ccache
        key: ${{ github.event.inputs.source_branch }}-ccache

    - name: Create ccache tar files
      if: ${{ github.event.inputs.ccache == 'true'
      continue-on-error: true
      working-directory: /builder
      run: |
        mkdir -p ccache
        tar cf - .ccache | split -d -b 1800m - ccache/${{ github.event.inputs.device }}.tar.  

    - name: Upload Cached (releases - ccache)
      if: ${{ github.event.inputs.ccache == 'true' && github.event.inputs.device == 'armv8' || github.event.inputs.device == 'nanopi-r4s' }}
      continue-on-error: true
      uses: ncipollo/release-action@v1.14.0
      with:
        name: ccache
        allowUpdates: true
        tag: ccache
        commit: master
        replacesArtifacts: true
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          ${{ env.build_dir }}/ccache/*

    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p rom info

    - name: Create release
      continue-on-error: true
      uses: ncipollo/release-action@v1
      with:
        name: ${{ github.event.inputs.source_branch }}
        allowUpdates: true
        tag: ${{ github.event.inputs.source_branch }}
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.build_dir }}/rom/*          
