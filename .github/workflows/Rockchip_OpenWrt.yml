name: Rockchip_OpenWrt

on:
  workflow_dispatch:
    inputs:
      gcc_version:
        description: "Select GCC Version"
        required: true
        default: "GCC_13"
        type: choice
        options:
          - GCC_13
          - GCC_14
      Load_core:
        description: "Load adguardhome and mate core"
        required: true
        default: "All"
        type: choice
        options:
          - None
          - AdGuardhome
          - Meta
          - All
      lan_addr:
        description: 'Setting default LAN address'
        required: true
        default: '10.0.0.1'
        type: string  
      ccache:
        description: 'Enable ccache (Use Cache to speed up next build)'
        type: boolean
        default: true
      options_menu:
        description: 'Options menu (Loading the ZeroWrt options menu)'
        type: boolean
        default: true
          
jobs:
  build:
    name: Build ${{ github.event.inputs.device }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      continue-on-error: true
      uses: actions/checkout@main
      with:
        path: ZeroWrt-Action

    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        echo build_dir="/builder" >> "$GITHUB_ENV"

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Install Caddy Server
      run: |
        sudo curl -sL -o /usr/bin/caddy https://github.com/oppen321/ZeroWrt-Action/releases/download/caddy/caddy
        sudo chmod 755 /usr/bin/caddy
        echo ":8080 {" > caddyfile
        echo "    root * $(pwd)/ZeroWrt-Action" >> caddyfile
        echo "    file_server browse" >> caddyfile
        echo "}" >> caddyfile
        sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile

    - name: Free disk space
      uses: sbwml/actions@free-disk
      with:
        build-mount-path: /builder

    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup

    - name: Install LLVM
      uses: sbwml/actions@install-llvm  
      
    - name: Restore Cached
      if: ${{ github.event.inputs.ccache }}
      uses: actions/cache/restore@v4
      with:
        path: /builder/.ccache
        key: ${{ github.event.inputs.source_branch }}-ccache

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      run: |
        [ ${{ github.event.inputs.options_menu }} = 'true' ] && export OPTIONS_MENU=y
        [ ${{ github.event.inputs.ccache }} = 'true' ] && export ENABLE_CCACHE=y
        export Load_core=${{ github.event.inputs.Load_core }}
        export LAN=${{ github.event.inputs.lan_addr }}
        export gcc_version=${{ github.event.inputs.gcc_version }}
        bash <(curl -sS http://127.0.0.1:8080/Rockchip/build.sh) "$LAN" "$gcc_version" "$Load_core"

    - name: Extensive logs after a failed compilation
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s
          
    - name: Prepare Firmware Files
      id: prepare
      working-directory: /builder
      run: |
        export date=$(date +%Y%m%d)
        export kernel=$(grep -oP '(?<=LINUX_KERNEL_HASH-)[0-9]+\.[0-9]+\.[0-9]+' openwrt/include/kernel-6.6)
        for file in openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8*; do
            mv "$file" "openwrt/bin/targets/rockchip/armv8/ZeroWrt-Super-${date}-${kernel}${file#openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8}"
        done
        echo "Date: $date"
        echo "Kernel version: $kernel"
        mkdir -p rom
        for model in friendlyarm_nanopi-r2c \
                    friendlyarm_nanopi-r2c-plus \
                    friendlyarm_nanopi-r2s \
                    friendlyarm_nanopi-r3s \
                    friendlyarm_nanopi-r4s \
                    friendlyarm_nanopi-r4se \
                    friendlyarm_nanopi-r5c \
                    friendlyarm_nanopi-r5s \
                    friendlyarm_nanopi-r6c \
                    friendlyarm_nanopi-r6s \
                    lunzn_fastrhino-r66s \
                    lunzn_fastrhino-r68s; do
            cp -a "openwrt/bin/targets/rockchip/armv8/ZeroWrt-Super-$date-$kernel-$model-squashfs-sysupgrade.img.gz" rom/
        done
       
    - name: Create release
      if: steps.prepare.outcome == 'success'
      uses: ncipollo/release-action@v1
      with:
        name: OpenWrt-Rockchip-24.10
        allowUpdates: true
        tag: OpenWrt-Rockchip-24.10
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.build_dir }}/rom/*          
